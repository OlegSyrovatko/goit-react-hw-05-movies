{"version":3,"file":"static/js/104.6bf6fccb.chunk.js","mappings":"uQAEaA,EAAKC,EAAAA,EAAAA,IAAH,gKASFC,EAAKD,EAAAA,EAAAA,IAAH,wEAMFE,EAAIF,EAAAA,EAAAA,IAAH,4CAIDG,EAASH,EAAAA,EAAAA,IAAH,kF,2BCwBnB,EAvCa,WACX,OAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAeR,OAbAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,2FAClBC,EAAAA,QAAAA,OAAe,cADG,mBAGOC,EAAAA,EAAAA,IAAgBL,GAHvB,OAGVM,EAHU,OAIhBP,EAAUO,EAASC,MAJH,gDAMhBC,QAAQC,MAAR,MANgB,QAQlBL,EAAAA,QAAAA,SARkB,yDAAH,qDAUjBD,GACD,GAAE,CAACH,KAEF,SAACR,EAAD,UACGM,EAAOY,KAAI,gBAAGV,EAAH,EAAGA,GAAIW,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACV,SAACnB,EAAD,WACE,gCACGmB,IACC,gBACEC,IAAG,yCAAoCD,GACvCE,IAAKJ,EACLK,MAAO,MAGX,UAACpB,EAAD,WACGe,IAAQ,SAAChB,EAAD,UAAIgB,IACZC,IAAa,UAACjB,EAAD,yBAAeiB,YAX1BZ,EADC,KAmBjB,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Ul = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding-bottom: 16px;\n  margin-bottom: 16px;\n  border-bottom: 1px solid black;\n`;\n\nexport const Li = styled.div`\n  display: flex;\n  width: 200px;\n  gap: 5px;\n`;\n\nexport const P = styled.div`\n  font-size: 14px;\n`;\n\nexport const Aboute = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n","import { React, useEffect, useState } from 'react';\nimport { getMovieCredits } from '../../services/content-api';\nimport { Ul, Li, Aboute, P } from './Cast.styled';\nimport { useParams } from 'react-router-dom';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nconst Cast = () => {\n  const [heroes, setHeroes] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchHeroes = async () => {\n      Loading.circle('Loading...');\n      try {\n        const response = await getMovieCredits(id);\n        setHeroes(response.cast);\n      } catch (error) {\n        console.error(error);\n      }\n      Loading.remove();\n    };\n    fetchHeroes();\n  }, [id]);\n  return (\n    <Ul>\n      {heroes.map(({ id, name, character, profile_path }) => (\n        <Li key={id}>\n          <>\n            {profile_path && (\n              <img\n                src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                alt={name}\n                width={50}\n              />\n            )}\n            <Aboute>\n              {name && <P>{name}</P>}\n              {character && <P>Character: {character}</P>}\n            </Aboute>\n          </>\n        </Li>\n      ))}\n    </Ul>\n  );\n};\nexport default Cast;\n"],"names":["Ul","styled","Li","P","Aboute","useState","heroes","setHeroes","id","useParams","useEffect","fetchHeroes","Loading","getMovieCredits","response","cast","console","error","map","name","character","profile_path","src","alt","width"],"sourceRoot":""}