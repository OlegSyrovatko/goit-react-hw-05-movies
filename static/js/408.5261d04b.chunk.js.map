{"version":3,"file":"static/js/408.5261d04b.chunk.js","mappings":"mSAEaA,EAAWC,EAAAA,EAAAA,IAAH,iPAeRC,EAAUD,EAAAA,EAAAA,IAAH,iNAWPE,EAAcF,EAAAA,EAAAA,IAAH,qEAKXG,EAAMH,EAAAA,EAAAA,IAAH,mFAMHI,EAASJ,EAAAA,EAAAA,IAAH,uD,SCgEnB,EA1FsB,WACpB,OAA0BK,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAAsCN,EAAAA,EAAAA,UAAS,MAA/C,eAAOO,EAAP,KAAoBC,EAApB,KACA,GAAoCR,EAAAA,EAAAA,UAAS,MAA7C,eAAOS,EAAP,KAAmBC,EAAnB,KACA,GAAwCV,EAAAA,EAAAA,UAAS,WAAjD,eAAOW,EAAP,KAAqBC,EAArB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MA4BjB,OA1BAC,EAAAA,EAAAA,YAAU,WACJF,EAASG,OAASH,EAASG,MAAMC,OAC/BJ,EAASG,MAAMC,KAAKC,OAAOC,QAAQ,UAAY,GACjDT,EAAgB,UAAYG,EAASG,MAAMC,KAAKC,QAEb,MAAjCL,EAASG,MAAMC,KAAKG,UACtBV,EAAgB,KAGrB,GAAE,CAACG,EAASG,SAEbD,EAAAA,EAAAA,YAAU,WAAM,wCACd,qGACEM,EAAAA,QAAAA,OAAe,cADjB,UAGUC,EAAAA,EAAAA,IAAgBX,GAH1B,gBAEUZ,EAFV,EAEUA,MAAOE,EAFjB,EAEiBA,SAAUE,EAF3B,EAE2BA,OAAQE,EAFnC,EAEmCA,YAAakB,EAFhD,EAEgDA,aAE9CvB,EAASD,GACTG,EAAYD,GACZG,EAAUD,GACVG,EAAeD,GACfG,EAAce,GACdF,EAAAA,QAAAA,SATF,4CADc,yBAAC,WAAD,wBAadG,EACD,GAAE,CAACb,KAEF,iCACE,SAACnB,EAAD,WACE,SAAC,KAAD,CAAMiC,GAAIhB,EAAV,+BAEF,UAACf,EAAD,YACE,gCACG,IACAW,IACC,gBACEqB,IAAG,yCAAoCrB,GACvCsB,IAAK5B,QAIX,UAACJ,EAAD,YACE,+BACE,wBAAKI,MAGNQ,IAAc,+CAAeqB,KAAKC,MAAmB,GAAbtB,GAA1B,OACdN,IACC,iCACE,qCADF,KACoB,8BAAGA,OAIxBE,IACC,iCACE,+BACE,sCAEF,SAACN,EAAD,UACGM,EAAO2B,KAAI,SAAAC,GAAK,OACf,4BAAsBA,EAAMC,KAA5B,MAAWD,EAAMpB,GADF,gBAQ3B,SAACjB,EAAD,WACE,UAACC,EAAD,YACE,oDACA,UAACC,EAAD,YACE,SAAC,KAAD,CAAM6B,GAAE,kBAAad,EAAb,SAAR,mBACA,SAAC,KAAD,CAAMc,GAAE,kBAAad,EAAb,YAAR,+BAIN,SAAC,KAAD,MAGL,C","sources":["pages/MoviesDetails/MoviesDetails.styled.jsx","pages/MoviesDetails/MoviesDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const BackLink = styled.div`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;\n\nexport const Details = styled.div`\n  display: flex;\n  @media screen and (max-width: 768px) {\n    flex-wrap: wrap;\n  }\n  gap: 20px;\n  padding-bottom: 16px;\n  margin-bottom: 16px;\n  border-bottom: 1px solid black;\n`;\n\nexport const TextDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Add = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const Genres = styled.div`\n  display: flex;\n  gap: 5px;\n`;\n","import { React, useEffect, useState } from 'react';\nimport { useParams, useLocation, Link, Outlet } from 'react-router-dom';\nimport { getMovieDetails } from '../../services/content-api';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nimport {\n  Details,\n  TextDetails,\n  Genres,\n  Add,\n  BackLink,\n} from './MoviesDetails.styled';\n\nconst MoviesDetails = () => {\n  const [title, setTitle] = useState([]);\n  const [overview, setOverview] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [poster_path, setPoster_path] = useState(null);\n  const [popularity, setPopularity] = useState(null);\n  const [backLinkHref, setBackLinkHref] = useState('/movies');\n  const { id } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (location.state && location.state.from) {\n      if (location.state.from.search.indexOf('query') >= 0) {\n        setBackLinkHref('/movies' + location.state.from.search);\n      }\n      if (location.state.from.pathname === '/') {\n        setBackLinkHref('/');\n      }\n    }\n  }, [location.state]);\n\n  useEffect(() => {\n    async function fetchData() {\n      Loading.circle('Loading...');\n      const { title, overview, genres, poster_path, vote_average } =\n        await getMovieDetails(id);\n      setTitle(title);\n      setOverview(overview);\n      setGenres(genres);\n      setPoster_path(poster_path);\n      setPopularity(vote_average);\n      Loading.remove();\n    }\n\n    fetchData();\n  }, [id]);\n  return (\n    <>\n      <BackLink>\n        <Link to={backLinkHref}>Back to movies</Link>\n      </BackLink>\n      <Details>\n        <>\n          {' '}\n          {poster_path && (\n            <img\n              src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n              alt={title}\n            />\n          )}\n        </>\n        <TextDetails>\n          <>\n            <h1>{title}</h1>\n          </>\n\n          {popularity && <>User Score: {Math.round(popularity * 10)}%</>}\n          {overview && (\n            <>\n              <h2>Overview</h2> <>{overview}</>\n            </>\n          )}\n\n          {genres && (\n            <>\n              <>\n                <h3>Genres</h3>\n              </>\n              <Genres>\n                {genres.map(genre => (\n                  <span key={genre.id}>{genre.name} </span>\n                ))}\n              </Genres>\n            </>\n          )}\n        </TextDetails>\n      </Details>\n      <Details>\n        <TextDetails>\n          <h3>Additional information</h3>\n          <Add>\n            <Link to={`/movies/${id}/cast`}>Cast</Link>\n            <Link to={`/movies/${id}/reviews`}>Reviews </Link>\n          </Add>\n        </TextDetails>\n      </Details>\n      <Outlet />\n    </>\n  );\n};\nexport default MoviesDetails;\n"],"names":["BackLink","styled","Details","TextDetails","Add","Genres","useState","title","setTitle","overview","setOverview","genres","setGenres","poster_path","setPoster_path","popularity","setPopularity","backLinkHref","setBackLinkHref","id","useParams","location","useLocation","useEffect","state","from","search","indexOf","pathname","Loading","getMovieDetails","vote_average","fetchData","to","src","alt","Math","round","map","genre","name"],"sourceRoot":""}